import tempfile
from pathlib import Path
import subprocess

def render(source, preamble="", libs=["amssymb", "amsmath", "tikz", "circuitikz"], format="png", timeout=10):
  document = f"""
\\documentclass[margin=0pt,crop]{{standalone}}
\\usepackage{{{",".join(libs)}}}
{preamble}
\\begin{{document}}
{source}
\\end{{document}}
  """.strip()

  with tempfile.TemporaryDirectory() as base:
    path = Path(base)
    call = lambda *a, **k: subprocess.run(a, **k, cwd=path, capture_output=True, check=True, timeout=timeout)

    name = 'document'
    (path / (name+'.tex')).write_text(document)
    try:
      call("texfot", "pdflatex", "-halt-on-error", name)
    except subprocess.CalledProcessError as e:
      return False, '\n'.join(e.output.decode().strip().split('\n')[2:-1])
    match format:
      case "png":
        call("pdftocairo", "-png", "-transp", "-r", "720", "-singlefile", f"{name}.pdf", name)
        return True, (path / (name+'.png')).read_bytes()
      case "svg":
        call("pdf2svg", f"{name}.pdf", f"{name}.svg")
        return True, (path / (name+'.svg')).read_bytes()
      case _:
        raise Exception(f"Unknown format {format}")

def render_dvi(source, preamble="", libs=["amssymb", "amsmath", "tikz", "circuitikz"], timeout=15):
  document = f"""
\\documentclass[margin=0pt,crop,dvisvgm]{{standalone}}
\\usepackage{{{",".join(libs)}}}
{preamble}
\\begin{{document}}
{source}
\\end{{document}}
  """.strip()

  with tempfile.TemporaryDirectory() as base:
    path = Path(base)
    call = lambda *a, **k: subprocess.run(a, **k, cwd=path, capture_output=True, check=True, timeout=timeout)

    name = 'document'
    (path / (name+'.tex')).write_text(document)
    try:
      call("texfot", "latex", "-halt-on-error", name)
    except subprocess.CalledProcessError as e:
      return False, '\n'.join(e.output.decode().strip().split('\n')[2:-1])
    call("dvisvgm", "--zoom=1", "--exact", "--font-format=woff2", name, "-o", f"{name}.svg")
    svg = (path / (name+'.svg')).read_text()

    # dvisvgm adds in 'pt' to the dimensions instead of leaving them implicitly as 'px',
    # this confuses our renderer, so we remove them
    h1,h2,h3,*rest = svg.split('\n')
    assert h1 == "<?xml version='1.0' encoding='UTF-8'?>"
    assert h2.startswith("<!-- This file was generated by dvisvgm")
    assert h3.startswith("<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' ")
    assert h3.count('pt') == 2
    h3 = h3.replace('pt', '')
    h4 = '''<script><![CDATA[const svg=document.documentElement;svg.addEventListener('mouseover',svg.pauseAnimations);svg.addEventListener('mouseout',svg.unpauseAnimations);]]></script>'''
    svg = '\n'.join([h1,h2,h3,h4,*rest])

    return True, svg.encode()
