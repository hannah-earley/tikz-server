import tempfile
from pathlib import Path
import subprocess
import config

# helpers

class LaTeXError(Exception):
  pass

def make_call(cwd, timeout):
  return lambda *a, **k: \
    subprocess.run(a, **k, cwd=cwd,
                           capture_output=True,
                           check=True,
                           timeout=timeout)

def make_document(options, libs, preamble, source):
  option_string = f"[{','.join(options)}]" if options else ""
  if libs:
    preamble = f"\\usepackage{{{','.join(libs)}}}\n{preamble}"

  return f"""
\\documentclass{option_string}{{standalone}}
{preamble}
\\begin{{document}}
{source}
\\end{{document}}
  """.strip()

#

def render(
    source,
    preamble="",
    libs=config.DEFAULT_LIBRARIES,
    format="png",
    raster_dpi=720,
    timeout=config.RENDER_TIMEOUT):

  """
  Render the (standalone) tex document using pdflatex followed by either
  pdftocairo (if format is png) or pdf2svg (if format is svg).
  """

  document = make_document(['margin=0pt', 'crop'], libs, preamble, source)
  with tempfile.TemporaryDirectory() as base:
    path = Path(base)
    call = make_call(path, timeout)

    name = 'document'
    (path / (name+'.tex')).write_text(document)
    try:
      call("texfot", "pdflatex", "-halt-on-error", name)
    except subprocess.CalledProcessError as e:
      raise LaTeXError('\n'.join(e.output.decode().strip().split('\n')[2:-1]))

    match format:
      case "png":
        call("pdftocairo", "-png", "-transp", "-r", str(raster_dpi), "-singlefile", f"{name}.pdf", name)
        return (path / (name+'.png')).read_bytes()

      case "svg":
        call("pdf2svg", f"{name}.pdf", f"{name}.svg")
        return (path / (name+'.svg')).read_bytes()

      case _:
        raise Exception(f"Unknown format {format}")

#

def render_dvi(
    source,
    preamble="",
    libs=config.DEFAULT_LIBRARIES,
    timeout=config.RENDER_TIMEOUT,
    header=""):

  """
  Render the (standalone) tex document using plain latex followed by dvisvgm,
  which incidentally supports generating animated svgs from animated TikZ.
  """

  document = make_document(['margin=0pt', 'crop', 'dvisvgm'], libs, preamble, source)
  with tempfile.TemporaryDirectory() as base:
    path = Path(base)
    call = make_call(path, timeout)

    name = 'document'
    (path / (name+'.tex')).write_text(document)
    try:
      call("texfot", "latex", "-halt-on-error", name)
    except subprocess.CalledProcessError as e:
      raise LaTeXError('\n'.join(e.output.decode().strip().split('\n')[2:-1]))

    call("dvisvgm", "--zoom=1", "--exact", "--font-format=woff2", name, "-o", f"{name}.svg")
    svg = (path / (name+'.svg')).read_text()

    # Ensure the svg matches our expectations
    h1,h2,h3,*rest = svg.split('\n')
    assert h1 == "<?xml version='1.0' encoding='UTF-8'?>"
    assert h2.startswith("<!-- This file was generated by dvisvgm")
    assert h3.startswith("<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' ")
    assert h3.count('pt') == 2

    # dvisvgm adds in 'pt' to the dimensions instead of leaving them implicitly as 'px',
    # this confuses our renderer, so we remove them
    h3 = h3.replace('pt', '')
    svg = '\n'.join([h1,h2,h3,header,*rest])

    return svg.encode()
